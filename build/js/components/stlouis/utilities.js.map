{"version":3,"sources":["../../../../src/js/components/stlouis/utilities.js"],"names":[],"mappings":"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","file":"utilities.js","sourcesContent":["import {addressStructure} from 'js/config';\nimport {geocoderUrl} from 'js/config';\nimport {actions} from 'components/map/actions';\nimport {store} from 'components/map/store';\nimport esriRequest from 'esri/request';\nimport Point from 'esri/geometry/Point';\nimport {layerUrl} from 'js/config';\nimport Graphic from 'esri/graphic';\nimport PictureMarkerSymbol from 'esri/symbols/PictureMarkerSymbol';\n\nlet pointInfoArray = [\n  'Healthy Eating',\n  'Healthy Living',\n  'Park',\n  'Other'\n];\n\nexport let addPoint = (point, map, icon, data) =>{\n\tlet sms = new PictureMarkerSymbol('data:image/png;base64,' + icon, 20, 20);\n\tlet graphic = new Graphic(point, sms);\n  graphic.attributes = {\n      Address: data.address,\n      Memo: data.memo,\n      Name: data.name,\n      DataType: data.datatype\n  };\n\tmap.getLayer('map_graphics').add(graphic);\n\n  actions.updateGraphics(graphic);\n};\n\nexport let addTableRow = (data, tableIndex) =>{\n  if(tableIndex){\n    var item = {\n      index: tableIndex,\n      data: data\n    };\n    actions.replaceRow(item);\n  } else{\n    actions.updateTable(data);\n  }\n};\n\nexport let getIcons = () => {\n\tlet request = esriRequest({url: layerUrl + '/legend', content: {f: 'json'}, handleAs: 'json', callbackParamName: 'callback'});\n\n\trequest.then(function(response){\n    let icons = [];\n\t\tresponse.layers.map(function(layer){\n\t\t\ticons.push(layer.legend[0]);\n\n\t\t});\n    actions.updateIcon(response.layers[0].legend[0]);\n    actions.updateIcons(icons);\n\t});\n};\n\n\nexport let searchAddress = (addresses, tableIndex) =>{\n\n  let addressObj = addressStructure;\n  addressObj.records = [];\n  addresses.map(function(item){\n    addressObj.records.push({\n      attributes: {\n        SingleLine: item.address\n      }\n    });\n  });\n  let stringAddress = JSON.stringify(addressObj);\n\n\tlet request = esriRequest({url: geocoderUrl, content: {f: 'json', addresses: stringAddress}, handleAs: 'json', callbackParamName: 'callback'});\n\n\trequest.then(function(response){\n    response.locations.map(function(location, index){\n\t\t\tlet map = store.getState('map').map;\n\n      if((location.location.x !== 'NaN') && (pointInfoArray[parseInt(addresses[index].datatype)] !== undefined)) {\n        let point = new Point(location.location.x, location.location.y);\n        map.centerAndZoom(point, 13);\n        let datatypeIndex = addresses[index].datatype ? addresses[index].datatype : parseInt(addresses[index].datatype);\n        let datatype = pointInfoArray[parseInt(addresses[index].datatype)];\n        let data = {\n            name: addresses[index].name,\n            memo: addresses[index].memo,\n            address: addresses[index].address,\n            point: point,\n            datatype: datatype\n        };\n        addTableRow(data, tableIndex);\n        addPoint(point, map, store.getState().icons[datatypeIndex].imageData, data);\n      }else{\n        let datatype = pointInfoArray[parseInt(addresses[index].datatype)] ? pointInfoArray[parseInt(addresses[index].datatype)] : undefined;\n  \n        let data = {\n            name: addresses[index].name,\n            memo: addresses[index].memo,\n            address: addresses[index].address,\n            point: null,\n            datatype: datatype\n        };\n        addTableRow(data);\n      }\n    });\n\n\t});\n};\n\nexport let batchUpdate = (json) => {\n    searchAddress(json);\n};\n\n\ngetIcons();\n"]}